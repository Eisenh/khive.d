[project]
name = "khive"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "aiocache>=0.12.3",
    "aiohttp>=3.11.18",
    "aiolimiter>=1.2.1",
    "backoff>=2.2.1",
    "orjson>=3.10.18",
    "pydantic-settings>=2.9.1",
    "pydapter>=0.1.3",
    "pyyaml>=6.0.2",
    "datamodel-code-generator>=0.30.1",
]

[dependency-groups]
dev = [
    "black[jupyter]>=25.1.0",
    "ipykernel>=6.29.5",
    "isort>=6.0.1",
    "pre-commit>=4.2.0",
    "pytest-asyncio>=0.23.0", # Added pytest-asyncio
    "pytest-mock>=3.10.0",
    "ruff>=0.11.8",
]


[project.optional-dependencies]
reader = [
    "docling>=2.31.0",
    "tiktoken>=0.9.0",
]
openai = [
    "openai>=1.77.0",
]

mcp = [
    "mcp>=1.7.1",
]

[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle errors
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "F",   # pyflakes
    "FA",  # flake8-future-annotations
    "FLY",  # flynt
    "FURB", # refurb
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "INT",  # flake8-gettext
    "ISC",  # implicit-str-concat
    "LOG",  # flake8-logging
    "N",    # pep8-naming
    "PERF", # perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific lints
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "TCH", # flake8-type-checking
    "TID", # ban relative imports
    "TRY", # tryceratops
    "UP",  # pyupgrade
    "W",   # pycodestyle warnings
    "YTT", # flake8-2020
]

# pydocstyle.convention = "google"

ignore = [
    "B028",   # No explicit `stacklevel` keyword argument found
    "COM812", # ignore when using ruff-format
    "G004",   # Logging statement uses f-string
    "ISC001", # ignore when using ruff-format
    "N818",   # Exception name should be named with an Error suffix
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "S404",   # `subprocess` module is possibly insecure
    "E501",   # Line too long
    "UP042",  # Class inherits from both `str` and `enum.Enum` (third-party models)
    "N815",   # Variable in class scope should not be mixedCase (third-party models)
    "EXE001", # Shebang is present but file is not executable
    "SLF001", # Private member accessed
    "TRY401", # Redundant exception object included in logging call
    "TRY003", # Avoid specifying long messages outside the exception class
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "B007",   # Loop control variable not used within loop body
    "E741",   # Ambiguous variable name
    "N805",
    "SLF001",
]

exclude = ["tests/**/hooks/*"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D104", # Missing docstring in public package
    "D200", # One-line docstring should fit on one line with quotes
    "S101", # use of assert
    "S603", # `subprocess` call: check for execution of untrusted input"
    "S106", # Possible hardcoded password assigned to argument: "password"
    "S108", # Probable insecure usage of temporary file or directory: "/tmp"
    "ARG001", # Unused function argument
    "F841", # Local variable is assigned to but never used
    "SLF001", # Private member accessed
    "ARG005", # Unused lambda argument
    "DTZ011", # `datetime.date.today()` used
    "TCH003", # Move standard library import into a type-checking block
    "PGH003", # Use specific rule codes when ignoring type issues
    "SIM103", # Return the condition directly
    "SIM117", # Use a single `with` statement with multiple contexts
]
"cookiecutter/*" = [
    "S603", # `subprocess` call: check for execution of untrusted input"
]
"docs/conf.py" = ["A001", "D100"]
"src/khive/third_party/*" = [
    "N815", # Variable in class scope should not be mixedCase
    "UP042", # Class inherits from both `str` and `enum.Enum`
    "RUF001", # String contains ambiguous dash
]
"src/khive/protocols/*" = [
    "S110", # `try`-`except`-`pass` detected
]
"src/khive/cli/*" = [
    "F821", # Undefined name
    "FURB101", # `open` and `read` should be replaced by `Path().read_text()`
    "B904", # Within an `except` clause, raise exceptions with `raise ... from err`
    "TRY300", # Consider moving this statement to an `else` block
    "RET504", # Unnecessary assignment before `return` statement
    "S603", # `subprocess` call: check for execution of untrusted input
    "S607", # Starting a process with a partial executable path
    "PERF102", # When using only the keys of a dict use the `keys()` method
    "SIM103", # Return the condition directly
    "ARG001", # Unused function argument
    "F841", # Local variable is assigned to but never used
    "RUF029", # Function is declared `async`, but doesn't `await`
    "FURB113", # Use `list.extend(...)` instead of repeatedly calling `list.append()`
    "RUF005", # Consider `[x, *y]` instead of concatenation
    "PERF401", # Use a list comprehension to create a transformed list
    "DTZ011", # `datetime.date.today()` used
    "C414", # Unnecessary `list` call within `sorted()`
    "SIM105", # Use `contextlib.suppress(OSError)` instead of `try`-`except`-`pass`
    "TCH003", # Move standard library import into a type-checking block
    "PGH003", # Use specific rule codes when ignoring type issues
    "TRY004", # Prefer `TypeError` exception for invalid type
]

[tool.ruff.format]
quote-style = "preserve"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/khive"]

[tool.hatch.build]
exclude = [
    "dev/*",
    "data/*",
    "notebooks/*",
    "tests/*",
    "*.pyc",
    "__pycache__",
    "temp_logs/*",
    "logs/*",
]

[tool.black]
line-length = 88
target-version = ['py310']

[tool.isort]
profile = "black"
line_length = 88

[project.scripts]                # PEP 621 console-scripts table
khive         = "khive.cli.khive_cli:main"
